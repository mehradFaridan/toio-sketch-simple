"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var characteristics_1 = require("./characteristics");
function missingCharacteristicRejection() {
    return Promise.reject('cannot discover the characteristic');
}
var Cube = (function () {
    function Cube(peripheral) {
        this.eventEmitter = new events_1.EventEmitter();
        this.motorCharacteristic = null;
        this.lightCharacteristic = null;
        this.soundCharacteristic = null;
        this.sensorCharacteristic = null;
        this.buttonCharacteristic = null;
        this.batteryCharacteristic = null;
        this.configurationCharacteristic = null;
        this.peripheral = peripheral;
    }
    Object.defineProperty(Cube.prototype, "id", {
        get: function () {
            return this.peripheral.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Cube.prototype, "address", {
        get: function () {
            return this.peripheral.address;
        },
        enumerable: true,
        configurable: true
    });
    Cube.prototype.connect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.peripheral.connect(function (error) {
                if (error) {
                    reject(error);
                    return;
                }
                _this.peripheral.discoverAllServicesAndCharacteristics(function (error2, _service, characteristics) {
                    if (error2) {
                        reject(error2);
                        return;
                    }
                    if (characteristics) {
                        _this.setCharacteristics(characteristics);
                    }
                    resolve(_this);
                });
            });
        });
    };
    Cube.prototype.on = function (event, listener) {
        var typedEmitter = this.eventEmitter;
        typedEmitter.on(event, listener);
        return this;
    };
    Cube.prototype.off = function (event, listener) {
        var typedEmitter = this.eventEmitter;
        typedEmitter.removeListener(event, listener);
        return this;
    };
    Cube.prototype.move = function (left, right, duration) {
        if (duration === void 0) { duration = 0; }
        return this.motorCharacteristic !== null
            ? this.motorCharacteristic.move(left, right, duration)
            : missingCharacteristicRejection();
    };
    Cube.prototype.stop = function () {
        if (this.motorCharacteristic !== null) {
            this.motorCharacteristic.stop();
        }
    };
    Cube.prototype.turnOnLight = function (operation) {
        return this.lightCharacteristic !== null
            ? this.lightCharacteristic.turnOnLight(operation)
            : missingCharacteristicRejection();
    };
    Cube.prototype.turnOnLightWithScenario = function (operations, repeatCount) {
        if (repeatCount === void 0) { repeatCount = 0; }
        return this.lightCharacteristic !== null
            ? this.lightCharacteristic.turnOnLightWithScenario(operations, repeatCount)
            : missingCharacteristicRejection();
    };
    Cube.prototype.turnOffLight = function () {
        if (this.lightCharacteristic !== null) {
            this.lightCharacteristic.turnOffLight();
        }
    };
    Cube.prototype.playPresetSound = function (soundId) {
        if (this.soundCharacteristic !== null) {
            this.soundCharacteristic.playPresetSound(soundId);
        }
    };
    Cube.prototype.playSound = function (operations, repeatCount) {
        if (repeatCount === void 0) { repeatCount = 0; }
        return this.soundCharacteristic !== null
            ? this.soundCharacteristic.playSound(operations, repeatCount)
            : missingCharacteristicRejection();
    };
    Cube.prototype.stopSound = function () {
        if (this.soundCharacteristic !== null) {
            this.soundCharacteristic.stopSound();
        }
    };
    Cube.prototype.getSlopeStatus = function () {
        return this.sensorCharacteristic !== null
            ? this.sensorCharacteristic.getSlopeStatus()
            : missingCharacteristicRejection();
    };
    Cube.prototype.getCollisionStatus = function () {
        return this.sensorCharacteristic !== null
            ? this.sensorCharacteristic.getCollisionStatus()
            : missingCharacteristicRejection();
    };
    Cube.prototype.getButtonStatus = function () {
        return this.buttonCharacteristic !== null
            ? this.buttonCharacteristic.getButtonStatus()
            : missingCharacteristicRejection();
    };
    Cube.prototype.getBatteryStatus = function () {
        return this.batteryCharacteristic !== null
            ? this.batteryCharacteristic.getBatteryStatus()
            : missingCharacteristicRejection();
    };
    Cube.prototype.getBLEProtocolVersion = function () {
        return this.configurationCharacteristic !== null
            ? this.configurationCharacteristic.getBLEProtocolVersion()
            : missingCharacteristicRejection();
    };
    Cube.prototype.setCharacteristics = function (characteristics) {
        var _this = this;
        characteristics.forEach(function (characteristic) {
            switch (characteristic.uuid) {
                case characteristics_1.IdCharacteristic.UUID:
                    new characteristics_1.IdCharacteristic(characteristic, _this.eventEmitter);
                    break;
                case characteristics_1.MotorCharacteristic.UUID:
                    _this.motorCharacteristic = new characteristics_1.MotorCharacteristic(characteristic);
                    break;
                case characteristics_1.LightCharacteristic.UUID:
                    _this.lightCharacteristic = new characteristics_1.LightCharacteristic(characteristic);
                    break;
                case characteristics_1.SoundCharacteristic.UUID:
                    _this.soundCharacteristic = new characteristics_1.SoundCharacteristic(characteristic);
                    break;
                case characteristics_1.SensorCharacteristic.UUID:
                    _this.sensorCharacteristic = new characteristics_1.SensorCharacteristic(characteristic, _this.eventEmitter);
                    break;
                case characteristics_1.ButtonCharacteristic.UUID:
                    _this.buttonCharacteristic = new characteristics_1.ButtonCharacteristic(characteristic, _this.eventEmitter);
                    break;
                case characteristics_1.BatteryCharacteristic.UUID:
                    _this.batteryCharacteristic = new characteristics_1.BatteryCharacteristic(characteristic, _this.eventEmitter);
                    break;
                case characteristics_1.ConfigurationCharacteristic.UUID:
                    _this.configurationCharacteristic = new characteristics_1.ConfigurationCharacteristic(characteristic);
                    break;
                default:
            }
        });
    };
    Cube.TOIO_SERVICE_ID = '10b201005b3b45719508cf3efcd7bbae';
    return Cube;
}());
exports.Cube = Cube;
//# sourceMappingURL=cube.js.map